let Color = require('./index.js')

function assertError(n, shouldError, f) {
    try {
        f()
    } catch (e) {
        if (!shouldError) {
            console.error(n + " - Assertion failed! Error during execution: " + e)
            return false
        }
        return true
    }
    if (shouldError) {
        console.error(n + " - Assertion failed! No error during execution")
        return false
    }
    return true
}

function assertEquals(n, v1, v2) {
    if (v1 != v2) console.error(n + " - Assertion failed! Not equal (" + v1 + ", " + v2 + ")")
    return v1 == v2
}

let aG = true
aG &= assertError(0, true, () => { Color.fromHexString("") })
aG &= assertError(1, true, () => { Color.fromHexString("#") })
aG &= assertError(2, true, () => { Color.fromHexString("#") })
aG &= assertEquals(3, Color.WHITE.hexString, "#FFFFFF")
aG &= assertEquals(4, Color.WHITE.a, 255)
aG &= assertEquals(5, Color.WHITE.r, 255)
aG &= assertEquals(6, Color.WHITE.g, 255)
aG &= assertEquals(7, Color.WHITE.b, 255)
aG &= assertEquals(8, Color.WHITE.h, 0)
aG &= assertEquals(9, Color.WHITE.s, 0)
aG &= assertEquals(10, Color.WHITE.v, 1)
aG &= assertEquals(11, Color.TEAL.hexString, "#008080")
aG &= assertEquals(12, Color.TEAL.a, 255)
aG &= assertEquals(13, Color.TEAL.r, 0)
aG &= assertEquals(14, Color.TEAL.g, 128)
aG &= assertEquals(15, Color.TEAL.b, 128)
aG &= assertEquals(16, Color.TEAL.h, 180)
aG &= assertEquals(17, Color.TEAL.s, 1)
aG &= assertEquals(18, Color.TEAL.v, 0.5)
Color.WHITE = Color.fromArgb(255, 255, 255, 255)
aG &= assertEquals(19, Color.WHITE.hexString, "#FFFFFFFF")
aG &= assertEquals(20, Color.WHITE.a, 255)
aG &= assertEquals(21, Color.WHITE.r, 255)
aG &= assertEquals(22, Color.WHITE.g, 255)
aG &= assertEquals(23, Color.WHITE.b, 255)
aG &= assertEquals(24, Color.WHITE.h, 0)
aG &= assertEquals(25, Color.WHITE.s, 0)
aG &= assertEquals(26, Color.WHITE.v, 1)
Color.WHITE = Color.fromRgb(255, 255, 255)
aG &= assertEquals(27, Color.WHITE.hexString, "#FFFFFF")
aG &= assertEquals(28, Color.WHITE.a, 255)
aG &= assertEquals(29, Color.WHITE.r, 255)
aG &= assertEquals(30, Color.WHITE.g, 255)
aG &= assertEquals(31, Color.WHITE.b, 255)
aG &= assertEquals(32, Color.WHITE.h, 0)
aG &= assertEquals(33, Color.WHITE.s, 0)
aG &= assertEquals(34, Color.WHITE.v, 1)
Color.WHITE = Color.fromHsv(0, 0, 1)
aG &= assertEquals(35, Color.WHITE.hexString, "#FFFFFF")
aG &= assertEquals(36, Color.WHITE.a, 255)
aG &= assertEquals(37, Color.WHITE.r, 255)
aG &= assertEquals(38, Color.WHITE.g, 255)
aG &= assertEquals(39, Color.WHITE.b, 255)
aG &= assertEquals(40, Color.WHITE.h, 0)
aG &= assertEquals(41, Color.WHITE.s, 0)
aG &= assertEquals(42, Color.WHITE.v, 1)
Color.TEAL = Color.fromArgb(255, 0, 128, 128)
aG &= assertEquals(42, Color.TEAL.hexString, "#FF008080")
aG &= assertEquals(43, Color.TEAL.a, 255)
aG &= assertEquals(44, Color.TEAL.r, 0)
aG &= assertEquals(45, Color.TEAL.g, 128)
aG &= assertEquals(46, Color.TEAL.b, 128)
aG &= assertEquals(47, Color.TEAL.h, 180)
aG &= assertEquals(48, Color.TEAL.s, 1)
aG &= assertEquals(49, Color.TEAL.v, 0.5)
Color.TEAL = Color.fromRgb(0, 128, 128)
aG &= assertEquals(50, Color.TEAL.hexString, "#008080")
aG &= assertEquals(51, Color.TEAL.a, 255)
aG &= assertEquals(52, Color.TEAL.r, 0)
aG &= assertEquals(53, Color.TEAL.g, 128)
aG &= assertEquals(54, Color.TEAL.b, 128)
aG &= assertEquals(55, Color.TEAL.h, 180)
aG &= assertEquals(56, Color.TEAL.s, 1)
aG &= assertEquals(57, Color.TEAL.v, 0.5)
Color.TEAL = Color.fromHsv(180, 1, 0.5)
aG &= assertEquals(58, Color.TEAL.hexString, "#008080")
aG &= assertEquals(59, Color.TEAL.a, 255)
aG &= assertEquals(60, Color.TEAL.r, 0)
aG &= assertEquals(61, Color.TEAL.g, 128)
aG &= assertEquals(62, Color.TEAL.b, 128)
aG &= assertEquals(63, Color.TEAL.h, 180)
aG &= assertEquals(64, Color.TEAL.s, 1)
aG &= assertEquals(65, Color.TEAL.v, 0.5)
let tc = Color.fromHexString("#7ebf56")
aG &= assertEquals(66, tc.hexString, "#7EBF56")
aG &= assertEquals(67, tc.a, 255)
aG &= assertEquals(68, tc.r, 126)
aG &= assertEquals(69, tc.g, 191)
aG &= assertEquals(70, tc.b, 86)
aG &= assertEquals(71, tc.h, 97)
aG &= assertEquals(72, tc.s, .55)
aG &= assertEquals(73, tc.v, .75)
tc = Color.fromArgb(255, 126, 191, 86)
aG &= assertEquals(74, tc.hexString, "#FF7EBF56")
aG &= assertEquals(75, tc.a, 255)
aG &= assertEquals(76, tc.r, 126)
aG &= assertEquals(77, tc.g, 191)
aG &= assertEquals(78, tc.b, 86)
aG &= assertEquals(79, tc.h, 97)
aG &= assertEquals(80, tc.s, .55)
aG &= assertEquals(81, tc.v, .75)
tc = Color.fromRgb(126, 191, 86)
aG &= assertEquals(74, tc.hexString, "#7EBF56")
aG &= assertEquals(75, tc.a, 255)
aG &= assertEquals(76, tc.r, 126)
aG &= assertEquals(77, tc.g, 191)
aG &= assertEquals(78, tc.b, 86)
aG &= assertEquals(79, tc.h, 97)
aG &= assertEquals(80, tc.s, .55)
aG &= assertEquals(81, tc.v, .75)
tc = Color.fromHsv(97, .55, .75)
aG &= assertEquals(82, tc.hexString, "#7EBF56")
aG &= assertEquals(83, tc.a, 255)
aG &= assertEquals(84, tc.r, 126)
aG &= assertEquals(85, tc.g, 191)
aG &= assertEquals(86, tc.b, 86)
aG &= assertEquals(87, tc.h, 97)
aG &= assertEquals(88, tc.s, .55)
aG &= assertEquals(89, tc.v, .75)
tc = Color.fromHexString("#ABC")
aG &= assertEquals(90, tc.hexString, "#AABBCC")
aG &= assertEquals(91, tc.a, 255)
aG &= assertEquals(92, tc.r, 170)
aG &= assertEquals(93, tc.g, 187)
aG &= assertEquals(94, tc.b, 204)
aG &= assertEquals(95, tc.h, 210)
aG &= assertEquals(96, tc.s, .17)
aG &= assertEquals(97, tc.v, .8)
tc = Color.fromHexString("#CABC")
aG &= assertEquals(98, tc.hexString, "#CCAABBCC")
aG &= assertEquals(99, tc.a, 204)
aG &= assertEquals(100, tc.r, 170)
aG &= assertEquals(101, tc.g, 187)
aG &= assertEquals(102, tc.b, 204)
aG &= assertEquals(103, tc.h, 210)
aG &= assertEquals(104, tc.s, .17)
aG &= assertEquals(105, tc.v, .8)
aG &= assertError(106, true, () => { Color.fromHexString("#x") })
aG &= assertError(107, true, () => { Color.fromHexString("#aaaaaaaaaa") })
aG &= assertError(108, true, () => { Color.fromArgb(-1, 0, 0, 0) })
aG &= assertError(109, true, () => { Color.fromArgb(0, 256, 0, 0) })
aG &= assertError(110, true, () => { Color.fromRgb(256, 0, 0) })
aG &= assertError(111, true, () => { Color.fromRgb(-1, 0, 0) })
aG &= assertError(112, true, () => { Color.fromHsv(-1, 0, 0) })
aG &= assertError(113, true, () => { Color.fromHsv(361, 0, 0) })
aG &= assertError(114, false, () => { Color.fromHsv(360, 0, 0) })
aG &= assertError(115, true, () => { Color.fromHsv(360, -0.5, 0) })
aG &= assertError(116, true, () => { Color.fromHsv(361, 1.1, 0) })
aG &= assertError(117, true, () => { Color.fromHsv(360, 0, -0.5) })
aG &= assertError(118, true, () => { Color.fromHsv(361, 0, 1.1) })
if (aG) {
    console.log("All cases passed!")
}

